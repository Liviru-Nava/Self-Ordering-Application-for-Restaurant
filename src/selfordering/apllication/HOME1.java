/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package selfordering.apllication;

import graph_classes.DijkstraAlgorithm;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import menu_item_classes.*;
import order_classes.*;
import heap_classes.MaximumPreparationTimeHeap;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Hirantha perera
 */
public class HOME1 extends javax.swing.JFrame implements Runnable{

    // implement runneble to run didgital clock inside the program while proagm is running
    int hour,second,minute;
    boolean pizza_button_state=false;
    boolean appetizer_button_state=false;
    boolean beverage_button_state=false;
    boolean dessert_button_state=false;
    
    private int[][] graph;
    private String[] locations;
    
    
    MenuItemLinkedList original_menu_list = new MenuItemLinkedList();
    MenuItemLinkedList menu_list = new MenuItemLinkedList();
    MaximumPreparationTimeHeap max_heap = new MaximumPreparationTimeHeap(100);
    OrderCircularQueue order_queue = new OrderCircularQueue();

    DefaultTableModel tbl_cart;
    public HOME1() 
    {
        initComponents();
        // these code for adjest coloum width
        TableColumnModel columnModel = tbl_show_menu_items.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(200); // First Name column
        columnModel.getColumn(1).setPreferredWidth(10); // Last Name column
        TableColumnModel columnMode2 = tbl_show_cart.getColumnModel();
        columnMode2.getColumn(0).setPreferredWidth(180); // First Name column
        columnMode2.getColumn(1).setPreferredWidth(10); // Last Name column
        tbl_cart = (DefaultTableModel) tbl_show_cart.getModel();
        //insert products to linkedlist
        insertMenuDetails();
        
        graph = new int[][] {
         {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // Vito Pizza
         {8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // Gallface
         {0, 7, 0, 9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // Townhall
         {0, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // Kollupitiya
         {0, 0, 3, 4, 0, 12, 5, 0, 0, 0, 0, 0, 0, 0, 0}, // Bambalapitya
         {0, 0, 0, 0, 12, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0}, // Dematagoda
         {0, 0, 0, 0, 5, 3, 0, 5, 5, 0, 0, 0, 0, 0, 0}, // Wellawatte
         {0, 0, 0, 0, 0, 3, 5, 0, 3, 0, 0, 0, 0, 0, 0}, // Havelock Road
         {0, 0, 0, 0, 0, 0, 5, 3, 0, 10, 5, 0, 0, 0, 0}, // Maharagama
         {0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 3, 3, 0, 0, 0}, // Nugegoda
         {0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 5, 3, 0, 0}, // Piliyandala
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 0, 12, 0, 0}, // Nawala
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 12, 0, 5, 0}, // Narahenpita
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3}, // Borella
         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0} //Â WardÂ Place
        };

        
        // Array of location names
        locations = new  String[]{"Vito Pizza", "Gallface", "Townhall", "Kollupitiya", "Bambalapitya", "Dematagoda", "Wellawatte", "Havelock Road", "Maharagama", "Nugegoda", "Piliyandala", "Nawala", "Narahenpita", "Borella", "Ward Place"};

        
     
        
        // Add selection listener to sourceTable
        tbl_show_menu_items.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    updateTargetTable();
                }
            }
        });
        
        // this codes for the digital clock
        Thread t=new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        com_location = new javax.swing.JComboBox<>();
        btn_beverage = new rojeru_san.complementos.RSButtonHover();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_show_cart = new javax.swing.JTable();
        billvalue = new javax.swing.JPanel();
        lbl_total = new javax.swing.JLabel();
        btn_order_now = new rojeru_san.complementos.RSButtonHover();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btn_min_max_sort = new rojeru_san.complementos.RSButtonHover();
        btn_max_min_sort = new rojeru_san.complementos.RSButtonHover();
        btn_popularity_sort = new rojeru_san.complementos.RSButtonHover();
        btn_alphabetical_sort = new rojeru_san.complementos.RSButtonHover();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea_display = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        txt_estimatedTime = new javax.swing.JTextField();
        txt_preptime = new javax.swing.JTextField();
        txt_deliverytime1 = new javax.swing.JTextField();
        txt_customer_telephone = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbl_show_menu_items = new javax.swing.JTable();
        lbl_timeshow = new java.awt.Label();
        rSButtonHover1 = new rojeru_san.complementos.RSButtonHover();
        rSButtonHover5 = new rojeru_san.complementos.RSButtonHover();
        btn_pizza = new rojeru_san.complementos.RSButtonHover();
        btn_appetizer = new rojeru_san.complementos.RSButtonHover();
        btn_dessert = new rojeru_san.complementos.RSButtonHover();
        jLabel23 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmb_order_type = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        lbl_time = new java.awt.Label();
        btn_kitchen_view = new rojeru_san.complementos.RSButtonHover();
        rSButtonHover9 = new rojeru_san.complementos.RSButtonHover();
        jLabel24 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home UI");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1080, 1080));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel22.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(156, 150, 150));
        jLabel22.setText("copyright ©PDSA | Develop By Hirantha And Liviru");
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 990, -1, -1));

        com_location.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        com_location.setForeground(new java.awt.Color(204, 0, 0));
        com_location.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gallface", "Townhall", "Kollupitiya", "Bambalapitya", "Dematagoda", "Wellawatte", "Havelock Road", "Maharagama", "Nugegoda", "Piliyandala", "Nawala", "Narahenpita", "Borella", "Ward Place" }));
        com_location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                com_locationActionPerformed(evt);
            }
        });
        jPanel1.add(com_location, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 270, 280, 50));

        btn_beverage.setBackground(new java.awt.Color(204, 0, 51));
        btn_beverage.setText("Beverage");
        btn_beverage.setColorHover(new java.awt.Color(0, 255, 51));
        btn_beverage.setColorTextHover(new java.awt.Color(0, 0, 0));
        btn_beverage.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_beverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_beverageActionPerformed(evt);
            }
        });
        jPanel1.add(btn_beverage, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, 130, 50));

        tbl_show_cart.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbl_show_cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price"
            }
        ));
        tbl_show_cart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tbl_show_cart.setGridColor(new java.awt.Color(204, 204, 204));
        tbl_show_cart.setRowHeight(40);
        tbl_show_cart.setSelectionBackground(new java.awt.Color(204, 0, 51));
        tbl_show_cart.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tbl_show_cart.setShowGrid(true);
        tbl_show_cart.setShowVerticalLines(false);
        jScrollPane3.setViewportView(tbl_show_cart);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 70, 460, 500));

        billvalue.setBackground(new java.awt.Color(255, 255, 255));
        billvalue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        billvalue.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_total.setFont(new java.awt.Font("Segoe UI", 1, 26)); // NOI18N
        lbl_total.setText("0.00");
        billvalue.add(lbl_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 120, -1));

        btn_order_now.setBackground(new java.awt.Color(204, 0, 0));
        btn_order_now.setText("Order Now");
        btn_order_now.setColorHover(new java.awt.Color(0, 153, 0));
        btn_order_now.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_order_now.setIconTextGap(18);
        btn_order_now.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_order_nowActionPerformed(evt);
            }
        });
        billvalue.add(btn_order_now, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 240, 74));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 26)); // NOI18N
        jLabel12.setText("Total");
        billvalue.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, -1, -1));

        jPanel1.add(billvalue, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 580, 460, 220));

        jPanel2.setBackground(new java.awt.Color(235, 232, 232));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_min_max_sort.setBackground(new java.awt.Color(0, 153, 0));
        btn_min_max_sort.setText("Min - Max");
        btn_min_max_sort.setColorHover(new java.awt.Color(204, 0, 0));
        btn_min_max_sort.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_min_max_sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_min_max_sortActionPerformed(evt);
            }
        });
        jPanel2.add(btn_min_max_sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 120, 50));

        btn_max_min_sort.setBackground(new java.awt.Color(0, 153, 0));
        btn_max_min_sort.setText("Max - Min");
        btn_max_min_sort.setColorHover(new java.awt.Color(204, 0, 51));
        btn_max_min_sort.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_max_min_sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_max_min_sortActionPerformed(evt);
            }
        });
        jPanel2.add(btn_max_min_sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 120, 50));

        btn_popularity_sort.setBackground(new java.awt.Color(0, 153, 0));
        btn_popularity_sort.setText("Popular");
        btn_popularity_sort.setColorHover(new java.awt.Color(204, 0, 0));
        btn_popularity_sort.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_popularity_sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_popularity_sortActionPerformed(evt);
            }
        });
        jPanel2.add(btn_popularity_sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 120, 50));

        btn_alphabetical_sort.setBackground(new java.awt.Color(0, 153, 0));
        btn_alphabetical_sort.setText("A - Z");
        btn_alphabetical_sort.setColorHover(new java.awt.Color(204, 0, 51));
        btn_alphabetical_sort.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_alphabetical_sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_alphabetical_sortActionPerformed(evt);
            }
        });
        jPanel2.add(btn_alphabetical_sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 120, 50));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Filter By");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 330, 330, 150));

        jPanel3.setBackground(new java.awt.Color(241, 237, 237));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        textarea_display.setColumns(20);
        textarea_display.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textarea_display.setRows(5);
        jScrollPane1.setViewportView(textarea_display);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 400, 150));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Display");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, -1, -1));

        txt_estimatedTime.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        txt_estimatedTime.setForeground(new java.awt.Color(204, 0, 0));
        txt_estimatedTime.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel3.add(txt_estimatedTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 400, 60));

        txt_preptime.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        txt_preptime.setForeground(new java.awt.Color(204, 0, 0));
        txt_preptime.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel3.add(txt_preptime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 400, 50));

        txt_deliverytime1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        txt_deliverytime1.setForeground(new java.awt.Color(204, 0, 0));
        txt_deliverytime1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel3.add(txt_deliverytime1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 400, 50));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 490, 420, 310));

        txt_customer_telephone.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        txt_customer_telephone.setText("+94");
        txt_customer_telephone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_customer_telephoneActionPerformed(evt);
            }
        });
        jPanel1.add(txt_customer_telephone, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 130, 320, 50));

        tbl_show_menu_items.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbl_show_menu_items.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price"
            }
        ));
        tbl_show_menu_items.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tbl_show_menu_items.setGridColor(new java.awt.Color(204, 204, 204));
        tbl_show_menu_items.setRowHeight(40);
        tbl_show_menu_items.setSelectionBackground(new java.awt.Color(204, 0, 51));
        tbl_show_menu_items.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tbl_show_menu_items.setShowGrid(true);
        tbl_show_menu_items.setShowVerticalLines(false);
        jScrollPane4.setViewportView(tbl_show_menu_items);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 580, 740));

        lbl_timeshow.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbl_timeshow.setForeground(new java.awt.Color(204, 0, 0));
        lbl_timeshow.setText("11.07.00AM");
        jPanel1.add(lbl_timeshow, new org.netbeans.lib.awtextra.AbsoluteConstraints(1700, 10, -1, 40));

        rSButtonHover1.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/chef (2).png"))); // NOI18N
        rSButtonHover1.setColorHover(new java.awt.Color(255, 255, 255));
        rSButtonHover1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/chef (3).png"))); // NOI18N
        rSButtonHover1.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/chef (3).png"))); // NOI18N
        jPanel1.add(rSButtonHover1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1800, 10, 60, -1));

        rSButtonHover5.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/setting (2).png"))); // NOI18N
        rSButtonHover5.setColorHover(new java.awt.Color(255, 255, 255));
        rSButtonHover5.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/setting (3).png"))); // NOI18N
        jPanel1.add(rSButtonHover5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1850, 10, 60, -1));

        btn_pizza.setBackground(new java.awt.Color(204, 0, 51));
        btn_pizza.setText("Pizza");
        btn_pizza.setColorHover(new java.awt.Color(0, 255, 51));
        btn_pizza.setColorTextHover(new java.awt.Color(0, 0, 0));
        btn_pizza.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_pizza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pizzaActionPerformed(evt);
            }
        });
        jPanel1.add(btn_pizza, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 140, 50));

        btn_appetizer.setBackground(new java.awt.Color(204, 0, 51));
        btn_appetizer.setText("Appetizer");
        btn_appetizer.setColorHover(new java.awt.Color(0, 255, 51));
        btn_appetizer.setColorTextHover(new java.awt.Color(0, 0, 0));
        btn_appetizer.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_appetizer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_appetizerActionPerformed(evt);
            }
        });
        jPanel1.add(btn_appetizer, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 140, 50));

        btn_dessert.setBackground(new java.awt.Color(204, 0, 51));
        btn_dessert.setText("Dessert");
        btn_dessert.setColorHover(new java.awt.Color(0, 255, 51));
        btn_dessert.setColorTextHover(new java.awt.Color(0, 0, 0));
        btn_dessert.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_dessert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dessertActionPerformed(evt);
            }
        });
        jPanel1.add(btn_dessert, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 140, 50));

        jLabel23.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(204, 204, 204));
        jLabel23.setText("copyright ©PDSA | Develop By Hirantha And Liviru");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 1060, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/output-onlinepngtools.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 0, 210, 100));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Location");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 250, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Customer Telephone");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 110, -1, -1));

        cmb_order_type.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cmb_order_type.setForeground(new java.awt.Color(204, 0, 0));
        cmb_order_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dine In", "Take Away", "Delivery", " " }));
        jPanel1.add(cmb_order_type, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 200, 280, 50));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Order Type");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, -1, -1));

        lbl_time.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbl_time.setForeground(new java.awt.Color(204, 0, 0));
        lbl_time.setText("11.07.00AM");
        jPanel1.add(lbl_time, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 10, -1, 40));
        lbl_time.getAccessibleContext().setAccessibleName("");

        btn_kitchen_view.setBackground(new java.awt.Color(255, 255, 255));
        btn_kitchen_view.setIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/chef (2).png"))); // NOI18N
        btn_kitchen_view.setColorHover(new java.awt.Color(255, 255, 255));
        btn_kitchen_view.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/chef (3).png"))); // NOI18N
        btn_kitchen_view.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/chef (3).png"))); // NOI18N
        btn_kitchen_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_kitchen_viewActionPerformed(evt);
            }
        });
        jPanel1.add(btn_kitchen_view, new org.netbeans.lib.awtextra.AbsoluteConstraints(1420, 10, 60, -1));

        rSButtonHover9.setBackground(new java.awt.Color(255, 255, 255));
        rSButtonHover9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/setting (2).png"))); // NOI18N
        rSButtonHover9.setColorHover(new java.awt.Color(255, 255, 255));
        rSButtonHover9.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/selfordering/apllication/setting (3).png"))); // NOI18N
        jPanel1.add(rSButtonHover9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1470, 10, 60, -1));

        jLabel24.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(156, 150, 150));
        jLabel24.setText("copyright ©PDSA | Develop By Hirantha And Liviru");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 800, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1540, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
     public void findshorttime(int preptime)
    {
             
        // Destination location for which shortest path is to be found
       String destination =(String)com_location.getSelectedItem();

        // Create an instance of DijkstraAlgorithm
        DijkstraAlgorithm dijkstraAlgorithm = new DijkstraAlgorithm();


        // Find shortest path from restaurant to the destination city
           int deleveryTime = dijkstraAlgorithm.findShortestDistanceToLocation(graph, locations, destination);
           String shortestPath = dijkstraAlgorithm.findShortestPathToLocation(graph, locations, destination);
         
           String currentTimeString =lbl_time.getText();
         
           TimeEstimation estimation=new TimeEstimation();
         
          txt_preptime.setText("Your order will be ready in " + preptime+ " Minutes");
          txt_deliverytime1.setText("Delivery Time : "+deleveryTime+" Minutes");
          txt_estimatedTime.setText("Estimate Delivery Time : "+estimation.estimateTime( currentTimeString,deleveryTime+preptime));
          textarea_display.setLineWrap(true);
          textarea_display.setWrapStyleWord(true);

          textarea_display.setText("Shortest path from Vito Pizza to " + destination + ": " + shortestPath);

    }
    
  
    
    private void btn_beverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_beverageActionPerformed
        // TODO add your handling code here:
        addBeverageToTableOriginal();
        pizza_button_state = false;
        appetizer_button_state = false;
        beverage_button_state = true;
        dessert_button_state = false;
    }//GEN-LAST:event_btn_beverageActionPerformed

    private void btn_order_nowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_order_nowActionPerformed
        String customer_telephone = txt_customer_telephone.getText();
        double order_total = Double.parseDouble(lbl_total.getText());
        String order_time = lbl_time.getText();
        int row_count = tbl_cart.getRowCount();
        OrderItem[] items = new OrderItem[row_count];
        
        for(int i=0; i< row_count; i++)
        {
            String item_name = String.valueOf(tbl_cart.getValueAt(i, 0));
            double item_price = (double)tbl_cart.getValueAt(i, 1);
            items[i] = new OrderItem(item_name, item_price);
        }
        Order new_order = new Order(customer_telephone, items, order_total, order_time);
        order_queue.enqueueOrder(new_order);
        JOptionPane.showMessageDialog(rootPane, "Your order has successfully been placed!");
        System.out.println("Orders from the queue:");
        displayOrders();
        tbl_cart.setRowCount(0);  //reset the table
        lbl_total.setText("0.00");      //reset the order total
        System.out.println("Values at heap: ");
        max_heap.printHeap();
        
        
        int preptime=max_heap.extractMax();//get prep time
         txt_preptime.setText("Your order will be ready in " + preptime+ " minutes");
        
         TimeEstimation estimate=new TimeEstimation();
         txt_estimatedTime.setText("Estimate Delivery Time :"+estimate.estimateTime(lbl_time.getText(), preptime));
         
         if(cmb_order_type.getSelectedIndex()==2)//delivery
        {
             findshorttime(preptime);
            
            
        }
        
        
        
        
        
        
        
    }//GEN-LAST:event_btn_order_nowActionPerformed

    private void btn_min_max_sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_min_max_sortActionPerformed
        // TODO add your handling code here:
        if(pizza_button_state == true)  //if pizza button is clicked, sort the pizza details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortMinMax();
            addPizzaToTable();
        }
        else if(appetizer_button_state == true) //if appetizer button is clicked, sort the appetizer details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortMinMax();
            addAppetizerToTable();
        }
        else if(beverage_button_state == true)  //if the beverage button is clicked, sort the beverage details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortMinMax();
            addBeverageToTable();
        }
        else if(dessert_button_state == true)   //if the dessert button is clicked, sort the dessert details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortMinMax();
            addDessertToTable();
        }
    }//GEN-LAST:event_btn_min_max_sortActionPerformed

    private void btn_max_min_sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_max_min_sortActionPerformed
        // TODO add your handling code here:
        if(pizza_button_state == true)  //if pizza button is clicked, sort the pizza details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortMaxMin();
            addPizzaToTable();
        }
        else if(appetizer_button_state == true) //if appetizer button is clicked, sort the appetizer details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortMaxMin();
            addAppetizerToTable();
        }
        else if(beverage_button_state == true)  //if the beverage button is clicked, sort the beverage details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortMaxMin();
            addBeverageToTable();
        }
        else if(dessert_button_state == true)   //if the dessert button is clicked, sort the dessert details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortMaxMin();
            addDessertToTable();
        }
    }//GEN-LAST:event_btn_max_min_sortActionPerformed

    private void btn_popularity_sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_popularity_sortActionPerformed
        // TODO add your handling code here:
         if(pizza_button_state == true)  //if pizza button is clicked, sort the pizza details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.popoularSort();
            addPizzaToTable();
        }
        else if(appetizer_button_state == true) //if appetizer button is clicked, sort the appetizer details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.popoularSort();
            addAppetizerToTable();
        }
        else if(beverage_button_state == true)  //if the beverage button is clicked, sort the beverage details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.popoularSort();
            addBeverageToTable();
        }
        else if(dessert_button_state == true)   //if the dessert button is clicked, sort the dessert details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.popoularSort();
            addDessertToTable();
        }
        
       
    }//GEN-LAST:event_btn_popularity_sortActionPerformed

    private void btn_alphabetical_sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_alphabetical_sortActionPerformed
        // TODO add your handling code here:
        if(pizza_button_state == true)  //if pizza button is clicked, sort the pizza details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortAlphabetical();
            addPizzaToTable();
        }
        else if(appetizer_button_state == true) //if appetizer button is clicked, sort the appetizer details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortAlphabetical();
            addAppetizerToTable();
        }
        else if(beverage_button_state == true)  //if the beverage button is clicked, sort the beverage details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortAlphabetical();
            addBeverageToTable();
        }
        else if(dessert_button_state == true)   //if the dessert button is clicked, sort the dessert details
        {
            // Reset the pizza list to its original state
            menu_list.head = copyMenuItemLinkedList(original_menu_list.head);
            menu_list.mergeSortAlphabetical();
            addDessertToTable();
        }
    }//GEN-LAST:event_btn_alphabetical_sortActionPerformed

    private void txt_customer_telephoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_customer_telephoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_customer_telephoneActionPerformed

    private void btn_pizzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pizzaActionPerformed
        // TODO add your handling code here:
        addPizzaToTableOriginal();
        pizza_button_state = true;
        appetizer_button_state = false;
        beverage_button_state = false;
        dessert_button_state = false;
    }//GEN-LAST:event_btn_pizzaActionPerformed

    private void btn_appetizerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_appetizerActionPerformed
        // TODO add your handling code here:
        addAppetizerToTableOriginal();
        pizza_button_state = false;
        appetizer_button_state = true;
        beverage_button_state = false;
        dessert_button_state = false;
    }//GEN-LAST:event_btn_appetizerActionPerformed

    private void btn_dessertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dessertActionPerformed
        // TODO add your handling code here:
        addDessertToTableOriginal();
        pizza_button_state = false;
        appetizer_button_state = false;
        beverage_button_state = false;
        dessert_button_state = true;
    }//GEN-LAST:event_btn_dessertActionPerformed

    private void com_locationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_com_locationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_com_locationActionPerformed

    private void btn_kitchen_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_kitchen_viewActionPerformed
        // TODO add your handling code here:
        Kitchen kitchen_screen = new Kitchen(order_queue);
        kitchen_screen.setVisible(true);
    }//GEN-LAST:event_btn_kitchen_viewActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HOME1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HOME1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HOME1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HOME1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HOME1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel billvalue;
    private rojeru_san.complementos.RSButtonHover btn_alphabetical_sort;
    private rojeru_san.complementos.RSButtonHover btn_appetizer;
    private rojeru_san.complementos.RSButtonHover btn_beverage;
    private rojeru_san.complementos.RSButtonHover btn_dessert;
    private rojeru_san.complementos.RSButtonHover btn_kitchen_view;
    private rojeru_san.complementos.RSButtonHover btn_max_min_sort;
    private rojeru_san.complementos.RSButtonHover btn_min_max_sort;
    private rojeru_san.complementos.RSButtonHover btn_order_now;
    private rojeru_san.complementos.RSButtonHover btn_pizza;
    private rojeru_san.complementos.RSButtonHover btn_popularity_sort;
    private javax.swing.JComboBox<String> cmb_order_type;
    private javax.swing.JComboBox<String> com_location;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private java.awt.Label lbl_time;
    private java.awt.Label lbl_timeshow;
    private javax.swing.JLabel lbl_total;
    private rojeru_san.complementos.RSButtonHover rSButtonHover1;
    private rojeru_san.complementos.RSButtonHover rSButtonHover5;
    private rojeru_san.complementos.RSButtonHover rSButtonHover9;
    private javax.swing.JTable tbl_show_cart;
    private javax.swing.JTable tbl_show_menu_items;
    private javax.swing.JTextArea textarea_display;
    private javax.swing.JTextField txt_customer_telephone;
    private javax.swing.JTextField txt_deliverytime1;
    private javax.swing.JTextField txt_estimatedTime;
    private javax.swing.JTextField txt_preptime;
    // End of variables declaration//GEN-END:variables
    @Override
    public void run() 
    {
         while (true)
        {
            Calendar cal=Calendar.getInstance();
            hour=cal.get(Calendar.HOUR_OF_DAY);
            minute=cal.get(Calendar.MINUTE);
            second=cal.get(Calendar.SECOND); 
            SimpleDateFormat sdf12 =new SimpleDateFormat("hh:mm:ss aa");
            Date dat =cal.getTime();
            String time12=sdf12.format(dat);
            lbl_time.setText(time12);
        }
    }
    //method implementation at the bottom
    //insert Menu details
    public void insertMenuDetails()
    {
        //insert 10 pizza details
        menu_list.insertProducts("Chicken Pizza","Pizza", 1200.00, 50, 10);
        menu_list.insertProducts("Beef Pepperoni Pizza", "Pizza", 1100.00, 12,11);
        menu_list.insertProducts("Butter Chicken Pizza", "Pizza", 1600.00, 22, 20);
        menu_list.insertProducts("Paneer Pizza", "Pizza", 990.00, 51, 15);
        menu_list.insertProducts("Sausage Delight Pizza", "Pizza", 1350.00, 49, 18);
        menu_list.insertProducts("Italian Pizza", "Pizza", 1450.00, 52, 13);
        menu_list.insertProducts("Pork Pizza", "Pizza", 2200.00, 48, 10);
        menu_list.insertProducts("Italian Veggie Pizza", "Pizza", 1000.00, 53, 14);
        menu_list.insertProducts("American Spicy Pizza", "Pizza", 1150.00, 55, 16);
        menu_list.insertProducts("Dominoes Pizza", "Pizza", 1800.00, 47, 19);
        
        //insert 5 Appetizers
        menu_list.insertProducts("French Fries", "Appetizer", 300.00, 20, 5);
        menu_list.insertProducts("Garlic Bread", "Appetizer", 350.00, 21, 8);
        menu_list.insertProducts("Chicken Nuggets", "Appetizer", 200.00, 19, 12);
        menu_list.insertProducts("Chicken Wings", "Appetizer", 150.00, 18, 18);
        menu_list.insertProducts("Cheese and Chicken balls", "Appetizer", 220.00, 22, 11);
        
        //insert 10 beverages details
        menu_list.insertProducts("Mineral Water", "Beverage", 300.00, 60, 1);
        menu_list.insertProducts("Coca Cola", "Beverage", 1100.00, 20, 1);
        menu_list.insertProducts("Cappuccino", "Beverage", 1200.00, 59, 12);
        menu_list.insertProducts("Iced Coffee", "Beverage", 900.00, 55, 13);
        menu_list.insertProducts("Strawberry Milkshake", "Beverage", 1350.00, 54, 14);
        
        //insert 10 dessert details
        menu_list.insertProducts("Raspberry Cheesecake", "Dessert", 700.00, 25, 20);
        menu_list.insertProducts("Lava Cake", "Dessert", 750.00, 26, 19);
        menu_list.insertProducts("English Custard", "Dessert", 900.00, 27, 21);
        menu_list.insertProducts("Chocolate Brownies", "Dessert", 850.00, 24, 21);
        menu_list.insertProducts("Fruit Torte", "Dessert", 1020.00, 23, 22);
        
        // Store the original pizza list
        original_menu_list.head = copyMenuItemLinkedList(menu_list.head);
    }
    public MenuItemNode copyMenuItemLinkedList(MenuItemNode head) 
    {
        MenuItemNode newHead = null;
        MenuItemNode tail = null;
        MenuItemNode current = head;
        
        while (current != null) 
        {
            MenuItemNode newNode = new MenuItemNode(current.getName(), current.getCategory(), current.getPrice(), current.getPopularity(), current.getPreparationTime());
            if (newHead == null) 
            {
                newHead = newNode;
                tail = newNode;
            } 
            else 
            {
                tail.next = newNode;
                newNode.previous = tail;
                tail = newNode;
            }
            current = current.next;
        }
        return newHead;
    }
    //method to display the Pizza products when Pizza button is pressed
    public void addPizzaToTable()
    {
        DefaultTableModel tbl_items = (DefaultTableModel) tbl_show_menu_items.getModel();
        tbl_items.setRowCount(0);
        MenuItemNode current_product = menu_list.head;
        
        while(current_product != null)
        {
            if(current_product.getCategory().equals("Pizza"))
            {
                tbl_items.addRow(new Object[]{current_product.getName(), current_product.getPrice()});
            }
            current_product = current_product.next;
        }
    }
    public void addPizzaToTableOriginal()
    {
        MenuItemNode current_product = original_menu_list.head;
        DefaultTableModel tbl_items = (DefaultTableModel) tbl_show_menu_items.getModel();
        tbl_items.setRowCount(0);
        
        while(current_product != null)
        {
            if(current_product.getCategory().equals("Pizza"))
            {
                tbl_items.addRow(new Object[]{current_product.getName(), current_product.getPrice()});
            }
            current_product = current_product.next;
        }
    }
    //method to display the Appetizer products when appetizer button is pressed
    public void addAppetizerToTable()
    {
        DefaultTableModel tbl_items = (DefaultTableModel) tbl_show_menu_items.getModel();
        tbl_items.setRowCount(0);
        MenuItemNode current_product = menu_list.head;
        
        while(current_product != null)
        {
            if(current_product.getCategory().equals("Appetizer"))
            {
                tbl_items.addRow(new Object[]{current_product.getName(), current_product.getPrice()});
            }
            current_product = current_product.next;
        }
    }
    public void addAppetizerToTableOriginal()
    {
        MenuItemNode current_product = original_menu_list.head;
        DefaultTableModel tbl_items = (DefaultTableModel) tbl_show_menu_items.getModel();
        tbl_items.setRowCount(0);
        
        while(current_product != null)
        {
            if(current_product.getCategory().equals("Appetizer"))
            {
                tbl_items.addRow(new Object[]{current_product.getName(), current_product.getPrice()});
            }
            current_product = current_product.next;
        }
    }
    //method to display the Beverage products when beverage button is pressed
    public void addBeverageToTable()
    {
        DefaultTableModel tbl_items = (DefaultTableModel) tbl_show_menu_items.getModel();
        tbl_items.setRowCount(0);
        MenuItemNode current_product = menu_list.head;
        
        while(current_product != null)
        {
            if(current_product.getCategory().equals("Beverage"))
            {
                tbl_items.addRow(new Object[]{current_product.getName(), current_product.getPrice()});
            }
            current_product = current_product.next;
        }
    }
    public void addBeverageToTableOriginal()
    {
        MenuItemNode current_product = original_menu_list.head;
        DefaultTableModel tbl_items = (DefaultTableModel) tbl_show_menu_items.getModel();
        tbl_items.setRowCount(0);
        
        while(current_product != null)
        {
            if(current_product.getCategory().equals("Beverage"))
            {
                tbl_items.addRow(new Object[]{current_product.getName(), current_product.getPrice()});
            }
            current_product = current_product.next;
        }
    }
    //method to display the Dessert products when Dessert button is pressed
    public void addDessertToTable()
    {
        DefaultTableModel tbl_items = (DefaultTableModel) tbl_show_menu_items.getModel();
        tbl_items.setRowCount(0);
        MenuItemNode current_product = menu_list.head;
        
        while(current_product != null)
        {
            if(current_product.getCategory().equals("Dessert"))
            {
                tbl_items.addRow(new Object[]{current_product.getName(), current_product.getPrice()});
            }
            current_product = current_product.next;
        }
    }
    public void addDessertToTableOriginal()
    {
        MenuItemNode current_product = original_menu_list.head;
        DefaultTableModel tbl_items = (DefaultTableModel) tbl_show_menu_items.getModel();
        tbl_items.setRowCount(0);
        
        while(current_product != null)
        {
            if(current_product.getCategory().equals("Dessert"))
            {
                tbl_items.addRow(new Object[]{current_product.getName(), current_product.getPrice()});
            }
            current_product = current_product.next;
        }
    }
    public void updateTargetTable()
    {
        int selectedRow = tbl_show_menu_items.getSelectedRow();
        if (selectedRow != -1) 
        {
            if(pizza_button_state == true)
            {
                passPreparationTimeToHeap(selectedRow);
                incremntPopular(selectedRow);
            }
            else if(appetizer_button_state == true)
            {
                 passPreparationTimeToHeap(selectedRow);
                 incremntPopular(selectedRow);
            }
            else if(beverage_button_state == true)
            {
                 passPreparationTimeToHeap(selectedRow);
                 incremntPopular(selectedRow);
            }
            else if(dessert_button_state == true)
            {
                passPreparationTimeToHeap(selectedRow);
                incremntPopular(selectedRow);
            }
            //codes to pass the values from table 1 to table 2
            String itemName = tbl_show_menu_items.getValueAt(selectedRow, 0).toString();
            double price = Double.parseDouble(tbl_show_menu_items.getValueAt(selectedRow, 1).toString());

            // Add selected row to target table
            Object[] rowData = {itemName, price};
            tbl_cart.addRow(rowData);
            
            //update the total 
            updateTotalLabel();
        }
    }
    //calculate and display the order total
    public void updateTotalLabel() 
    {
        double total = 0.0;
        for (int row = 0; row < tbl_cart.getRowCount(); row++) {
            double price = Double.parseDouble(tbl_cart.getValueAt(row, 1).toString());
            total += price;
        }
        lbl_total.setText(String.valueOf(total));
    }
    //pass the pizza preparation time to heap
    public void passPreparationTimeToHeap(int selectedRow)
    {
        String item_name = String.valueOf(tbl_show_menu_items.getValueAt(selectedRow, 0));
        MenuItemNode selected_item = original_menu_list.head;
        while(selected_item != null)
        {
            if(item_name.equals(selected_item.getName()))
            {
                System.out.println("Pizza prep time: " + selected_item.getPreparationTime());
                max_heap.insert(selected_item.getPreparationTime());
               
            }
            selected_item = selected_item.next;
        }
    }
    
    //INCREMNT  popular of select item
    public void incremntPopular(int selectedRow)
    {
        String item_name = String.valueOf(tbl_show_menu_items.getValueAt(selectedRow, 0));
        MenuItemNode selected_item = original_menu_list.head;
         while(selected_item != null)
        {
            if(item_name.equals(selected_item.getName()))
            {
               int popular = selected_item.getPopularity();
               String name=selected_item.getName();
               popular++;
               
               menu_list.updatePopular(name, popular); 
               original_menu_list.updatePopular(name, popular);
                System.out.println(popular);
               
            }
            selected_item = selected_item.next;
        }
        
    }
    
    private void displayOrders() 
    {
        // Dequeue and display orders until the queue is empty
        while (!order_queue.isEmpty()) {
            Order order = order_queue.dequeueOrder();
            displayOrderDetails(order);
        }
    }
    //display the items of that order
    private void displayOrderDetails(Order order) 
    {
        // Get order details as a formatted string
        String orderDetails = order.toString();

        // Display order details in the terminal
        System.out.println(orderDetails);
    }
}
